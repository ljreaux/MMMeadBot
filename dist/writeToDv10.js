"use strict";var c=Object.create;var n=Object.defineProperty;var l=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var d=(r,e)=>{for(var t in e)n(r,t,{get:e[t],enumerable:!0})},i=(r,e,t,o)=>{if(e&&typeof e=="object"||typeof e=="function")for(let s of g(e))!m.call(r,s)&&s!==t&&n(r,s,{get:()=>e[s],enumerable:!(o=l(e,s))||o.enumerable});return r};var h=(r,e,t)=>(t=r!=null?c(u(r)):{},i(e||!r||!r.__esModule?n(t,"default",{value:r,enumerable:!0}):t,r)),f=r=>i(n({},"__esModule",{value:!0}),r);var E={};d(E,{dv10:()=>v,fetchCloudinaryImages:()=>p,writeToDv10:()=>w});module.exports=f(E);var a=h(require("fs")),y="https://cloudinary-dv10-api.vercel.app/api/list-media",p=async()=>{try{let r=await fetch(y);if(!r.ok)throw new Error(`Failed to fetch images: ${r.statusText}`);return(await r.json()).resources.filter(o=>o.secure_url).map(o=>o.secure_url)}catch(r){return console.error("Error fetching Cloudinary images:",r),[]}},w=async r=>{try{let e=r.join(`
`);a.default.writeFileSync("images.txt",e),console.log("Images written to images.txt")}catch(e){console.error("Error writing to file:",e)}},x=()=>{try{return a.default.readFileSync("images.txt","utf8").split(`
`)}catch(r){return console.error(r),[]}},v=async()=>{try{let r=x();if(r.length)return r[Math.floor(Math.random()*r.length)];throw new Error("No images found in the Cloudinary folder.")}catch(r){return console.error(r),"No images available."}};0&&(module.exports={dv10,fetchCloudinaryImages,writeToDv10});
